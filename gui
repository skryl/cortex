#!/usr/bin/env ruby
require 'bundler/setup'
require 'benchmark'
Bundler.require(:default)

require_relative 'htm/htm'

PATTERN = [[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
           [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]]

CORTEX = HTM.new(pattern: PATTERN)

CURSED_CONFIG = {
  keybindings: {
    ' '    => -> { step },
    'f'    => -> { step(10) },
    'F'    => -> { step(100) },
    'm'    => -> { menu_mode? ? set_mode!(:normal) : set_mode!(:menu) }
  },

  variables: {
    htm:      -> { CORTEX },
    columns:  -> { htm.columns },
    synapses: -> { htm.columns.flat_map(&:synapses)},
    segments: -> { htm.cells.map(&:segments) },
    cells:    -> { htm.cells },

    get_step_time: ->{ @step_time ||=0 },
    set_step_time: ->(time) { @step_time = time },

    step: ->(n=1) {
      time = Benchmark.realtime { n.times { htm.step } }
      set_step_time(time/n)
    },

    mode: -> { @mode ||= :normal },
    menu_mode?: -> { @mode == :menu },

    set_mode!: ->(mode) {
      menu = find_container(:menu)
      case mode
      when :menu
        menu.show!
      when :normal
        menu.hide!
      end
      @mode = mode
    },

    hidden_children_for_container: -> {
      in_focus.hidden_children.map.with_index{ |c,i| "[#{i}](#{c.id})" }.join(' ')
    },

    styles: {
      panel:  { border: true},
      screen: { visible: false, border: true, flow: :horizontal },
      head:   { border: true, height: 5, bc: :blue, fg: :yellow },
      body:   { border: true, exclusive: true, top:    -> { parent.children.first.top + parent.children.first.height },
                                               height: -> { effective_height - parent.children.first.height }},
      menu:   { visible: false, border: true, bc: :blue, fg: :yellow, top: -> { parent.top + parent.height - 4 }, height: 4 }
    },
  },

  layout: [
    { id: 'Cortex 0.01', class: :head, content: -> {
      { status: {
          mode:            mode.upcase,
          screen:          nil,
          cycles:          htm.cycles,
          step_time:       get_step_time.round(2),
          inputs:          htm.num_inputs,
          columns:         htm.num_columns,
          cells:           htm.num_cells },
        columns: {
          input_size:      Column::INPUT_SIZE,
          min_overlap:     ProximalDendrite::MIN_OVERLAP,
          iradius:         htm.inhibition_radius,
          des_local_act:   Column::DESIRED_LOCAL_ACTIVITY,
          active_columns:  htm.active_columns.count,
          col_act_ratio:   htm.column_activity_ratio },
        cells: {
          learning_cells:  htm.learning_cells.count,
          predicted_cells: htm.predicted_cells.count,
          active_cells:    htm.active_cells.count,
          cell_act_ratio:  htm.cell_activity_ratio } }}
    },

    { id: :body, class: :body, layout: [
      { id: 1, class: :screen, layout: [
        { id: :activity, class: :panel, layout: [

          {type: :instrument, id: :activity, class: :instrument, fg: :red, bg: :blue,
           streams: [-> { columns.map { |c| c.active? ? '#' : ''}} ]},

          {type: :instrument, id: :raw_overlap, class: :instrument, fg: :yellow, bg: :green,
           streams: [-> { columns.map { |c| c.raw_overlap }} ]},

          {type: :instrument, id: :inputs, class: :instrument, fg: :red, bg: :green,
           streams: [-> { columns.map { |c| c.active? ? '#' : '' }} ]}
        ]},
        { id: :overlap, class: :panel, layout: [

          {type: :instrument, id: :overlap, class: :instrument, fg: :green, bg: :yellow, cell_size: 5,
           streams: [-> { columns.map { |c| c.overlap }} ]},

          {type: :instrument, id: :min_local_activity, class: :instrument, fg: :blue, bg: :green, cell_size: 5,
           streams: [-> { columns.map { |c| c.min_local_activity }} ]}
        ]}
      ]},

      { id: 2, class: :screen, layout: [
        { id: :counts, class: :panel, layout: [
          {type: :instrument, id: :active_count, class: :instrument, fg: :yellow, bg: :green, cell_size: 3,
           streams: [-> { columns.map { |c| c.active_count }} ]},

          {type: :instrument, id: :overlap_count, class: :instrument, fg: :yellow, bg: :green, cell_size: 3,
           streams: [-> { columns.map { |c| c.overlap_count }} ]},

          {type: :instrument, id: :boost, class: :instrument, fg: :red, bg: :yellow, cell_size: 6,
           streams: [-> { columns.map { |c| c.boost }} ]}
        ]},
        { id: :boost, class: :panel, layout: [
          {type: :instrument, id: :active_duty_cycle, class: :instrument, fg: :green, bg: :yellow, cell_size: 4,
           streams: [-> { columns.map { |c| c.active_duty_cycle }} ]},

          {type: :instrument, id: :overlap_duty_cycle, class: :instrument, fg: :green, bg: :yellow, cell_size: 4,
           streams: [-> { columns.map { |c| c.overlap_duty_cycle }} ]},

          {type: :instrument, id: :min_duty_cycle, class: :instrument, fg: :green, bg: :yellow, cell_size: 6,
           streams: [-> { columns.map { |c| c.min_duty_cycle }} ]}

        ]}
      ]},

      { id: 3, class: :screen, layout: [
        { id: :synapse_indices, class: :panel, layout: [
          {type: :instrument, id: :synapse_indices, class: :instrument, fg: :green, bg: :yellow, grid: :minimal,
           streams: [-> { synapses.map { |s| s.input.index }},
                     -> { synapses.map { |s| s.active? ? '#' : '' }} ]}
        ]},
        { id: :synapse_permancence, class: :panel, layout: [
          {type: :instrument, id: :synapse_perm, class: :instrument, fg: :green, bg: :yellow, grid: :minimal,
           streams: [-> { synapses.map { |s| perm = (s.permanence * 100).to_i; perm > 49 ? '#' : perm }},
                     -> { synapses.map { |s| s.active? ? '#' : '' }} ]}
        ]}
      ]},

      { id: 4, class: :screen, layout: [
        { id: :cells, class: :panel, layout: [
          {type: :instrument, id: :segments, class: :instrument, fg: :yellow, bg: :blue, grid: :minimal, cell_size: 4,
           streams: [-> { segments.map { |s| s.synapses.count }} ]}
        ]}
      ]},

      { id: 5, class: :screen, layout: [
        { id: :cells, class: :panel, layout: [
          {type: :instrument, id: :learning, class: :instrument, fg: :green, bg: :blue,
           streams: [-> { cells.map { |c| c.learning? ? '#' : ''}} ]},
          {type: :instrument, id: :segments, class: :instrument, fg: :yellow, bg: :blue,
           streams: [-> { cells.map { |c| c.segments.count }} ]}
        ]}
      ]},

      { id: 6, class: :screen, layout: [
        { id: :cells, class: :panel, layout: [
          {type: :instrument, id: :activity, class: :instrument, fg: :red, bg: :blue,
           streams: [-> { cells.map { |c| c.active? ? '#' : ''}} ]},
          {type: :instrument, id: :predictions, class: :instrument, fg: :magenta, bg: :blue,
           streams: [-> { cells.map { |c| c.prev_predicted? ? '#' : ''}} ]}
        ]}
      ]}
    ]},

    { id: :menu, class: :menu, content: -> { "HIDDEN: #{hidden_children_for_container}" }}
  ]}

Cursed::WM.new(CURSED_CONFIG).run

# PATTERN = [[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
#            [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
#            [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
#            [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]]

# PATTERN = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]

# RubyProf.start
# result = RubyProf.stop

# PRINTERS = [
#   RubyProf::FlatPrinter,
#   RubyProf::FlatPrinterWithLineNumbers,
#   RubyProf::GraphPrinter,
#   RubyProf::GraphHtmlPrinter
# ]
#
# PRINTERS.each.with_index do |p, i|
#   File.open("report#{i}.txt", 'w') { |f| p.new(result).print(f, min_percent: 2) }
# end

# printer = RubyProf::MultiPrinter.new(result)
# printer.print(path: '.', profile: 'profile')
