#!/usr/bin/env ruby

require 'pry'
require 'pry-byebug'
require 'pry-stack_explorer'

require_relative 'htm/htm'
require_relative 'scope/scope'

SCOPE_CONFIG = { screens: [

  { title: 1, panels: [
    { title: :activity, visible: true, instruments: [

      {title: :activity, fg: :red, bg: :blue, type: :full, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.active? ? '#' : ''}]},

      {title: :raw_overlap, fg: :yellow, bg: :green, type: :full, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.raw_overlap }]}, 

      {title: :inputs, fg: :red, bg: :green, type: :full, visible: true,
       dataf: lambda { |htm| htm.inputs }, 
       streamfs: [lambda { |c| c.active? ? '#' : '' }]}
    ]},
    { title: :overlap, visible: true, instruments: [

      {title: :overlap, fg: :green, bg: :yellow, type: :full, cell_size: 5, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.overlap }]}, 

      {title: :min_local_activity, fg: :blue, bg: :green, type: :full, cell_size: 5, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.min_local_activity }]}
    ]}
  ]},

  { title: 2, panels: [
    { title: :counts, visible: true, instruments: [
      {title: :active_count, fg: :yellow, bg: :green, type: :full, cell_size: 3, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.active_count }]},

      {title: :overlap_count, fg: :yellow, bg: :green, type: :full, cell_size: 3, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.overlap_count }]},

      {title: :boost, fg: :red, bg: :yellow, type: :full, cell_size: 6, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.boost }]}
    ]},
    { title: :boost, visible: true, instruments: [
      {title: :active_duty_cycle, fg: :green, bg: :yellow, type: :full, cell_size: 4, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.active_duty_cycle }]},

      {title: :overlap_duty_cycle, fg: :green, bg: :yellow, type: :full, cell_size: 4, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.overlap_duty_cycle }]},

      {title: :min_duty_cycle, fg: :green, bg: :yellow, type: :full, cell_size: 6, visible: true,
       dataf: lambda { |htm| htm.columns }, 
       streamfs: [lambda { |c| c.min_duty_cycle }]}

    ]}
  ]}, 

  { title: 3, panels: [
    { title: :synapse_indices, visible: true, instruments: [
      {title: :synapse_indices, fg: :green, bg: :yellow, type: :minimal, visible: true,
       dataf: lambda { |htm| htm.columns.map(&:synapses)}, 
       streamfs: [lambda { |s| s.input.index }, 
                  lambda { |s| s.active? ? '#' : '' }]} 
    ]}, 
    { title: :synapse_permancence, visible: true, instruments: [
      {title: :synapse_perm, fg: :green, bg: :yellow, type: :minimal, visible: true,
       dataf: lambda { |htm| htm.columns.map(&:synapses)}, 
       streamfs: [lambda { |s| perm = (s.permanence * 100).to_i; perm > 49 ? '#' : perm }, 
                  lambda { |s| s.active? ? '#' : '' }]} 
    ]} 
  ]},

  { title: 5, panels: [
    { title: :cells, visible: true, instruments: [
      {title: :segments, fg: :yellow, bg: :blue, type: :minimal, cell_size: 4, visible: true,
       dataf: lambda { |htm| htm.cells.map(&:segments) }, 
       streamfs: [lambda { |s| s.synapses.count }]} 
    ]}
  ]}, 

  { title: 4, panels: [
    { title: :cells, visible: true, instruments: [
      {title: :learning, fg: :green, bg: :blue, type: :full, visible: true,
       dataf: lambda { |htm| htm.cells }, 
       streamfs: [lambda { |c| c.learning? ? '#' : ''}]},
      {title: :segments, fg: :yellow, bg: :blue, type: :full, visible: true,
       dataf: lambda { |htm| htm.cells }, 
       streamfs: [lambda { |c| c.segments.count }]}
    ]}
  ]}, 

  { title: 6, panels: [
    { title: :cells, visible: true, instruments: [
      {title: :activity, fg: :red, bg: :blue, type: :full, visible: true,
       dataf: lambda { |htm| htm.cells }, 
       streamfs: [lambda { |c| c.active? ? '#' : ''}]},
      {title: :predictions, fg: :magenta, bg: :blue, type: :full, visible: true,
       dataf: lambda { |htm| htm.cells }, 
       streamfs: [lambda { |c| c.prev_predicted? ? '#' : ''}]}
    ]}
  ]} 

]}


PATTERN = [[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
           [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]] 

Scope.new(HTM.new(pattern: PATTERN), SCOPE_CONFIG).start_scope
